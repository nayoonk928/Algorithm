# -*- coding: utf-8 -*-
# UTF-8 encoding when using korean
import sys
import heapq
input = sys.stdin.readline

def dijkstra(graph, start, end):
    # 시작점에서부터의 최단 거리를 저장할 딕셔너리
    distance = {node: float('inf') for node in graph}
    distance[start] = 0  # 시작점의 거리는 0
    
    # 우선순위 큐를 이용하여 노드를 방문하는 순서를 결정
    queue = [(0, start)]  # (거리, 노드) 형태의 튜플을 저장
    heapq.heapify(queue)  # 우선순위 큐로 변환
    
    while queue:
        current_distance, current_node = heapq.heappop(queue)  # 가장 거리가 짧은 노드를 꺼냄
        
        # 현재 노드가 이미 처리된 경우 무시
        if current_distance > distance[current_node]:
            continue
        
        # 현재 노드에 연결된 모든 노드들을 확인
        for neighbor, weight in graph[current_node].items():
            distance_to_neighbor = current_distance + weight
            # 현재 노드를 거쳐서 이웃 노드로 가는 거리가 더 짧으면 갱신
            if distance_to_neighbor < distance[neighbor]:
                distance[neighbor] = distance_to_neighbor
                heapq.heappush(queue, (distance_to_neighbor, neighbor))
    
    # 목적지까지의 최단 거리 반환
    return distance[end]

# 입력 받기
N, M = map(int, input().split())
graph = {i: {} for i in range(1, N+1)}

for _ in range(M):
    A, B, W = map(int, input().split())
    # A에서 B로 가는 비용 W 저장
    if B not in graph[A] or W < graph[A][B]:
        graph[A][B] = W

# 다익스트라 알고리즘을 이용하여 최소 비용 계산
min_cost = dijkstra(graph, 1, N)

# 결과 출력
if min_cost == float('inf'):
    print("go home")
else:
    print(min_cost)
	